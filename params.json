{"name":"Snaps","tagline":"Creates a network of information that can be updated, interdependent and multi-relational. ","body":"# SNAPS: the way JS UX should be\r\n\r\nI recently encountered a rendering engine that does so much right that the things that are wrong with it are getting accepted as \"the ways that should be.\" \r\n\r\nI am attempting to address these things in code and show how easy it is to do things right. \r\n\r\n## 1: Total DOM control\r\n\r\nInstead of having widgets which seem like they are ashamed of the DOM, SNAPS embraces DOM wholly by allowing you to fully access and set all parts of a DomElement (attributes, styles, content), not just a subset of \"Blessed\" attributes and properties\r\n\r\n## 2: Embracing polyglot programming\r\n\r\nInstead of using fully customized physics, 3D and event systems, Snaps uses proven, available engines like THREE, Box2D and Signal. This keeps standard systems as part of the frame, and doesn't bloat itself with reinventions of problems that are largely solved.\r\n\r\n## 3: Designed for Threading\r\n\r\nSnaps is designed to enable easy export of data across the net, or threads, to take advantage of the emerging goodness of WebWorkers. \r\n\r\n## 4: A broad, open network of shared components\r\n\r\nSnaps uses a collection of Snap instances connected with links to form complex patterns that allow intercommunication. Specialized Snap inheritors can manage DOM interactions, or take on simple tasks like managing the size of DOM elements. \r\n\r\nSnap instances can be linked in parent child, semantic links, open graphs and sets, to allow any sort of structure you may need; for instance, you can set a row height Snap as the resource link of several different Snap's, and a column width Snap as the resource link of several different Snap's, to enable a grid pattern. \r\n\r\nWhile this pattern was created to enable DOM management, it can be used to manage any number of graph/property/semantic problems. \r\n\r\n## 5: Synchronized updates\r\n\r\nAs part of the optimization process for distributed work, all of the updating of data is synchronized by a global `update()` call, allowing a gated output of data to a remote system. ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}